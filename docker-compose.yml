version: "3.3"

volumes:
    database:

services:
    postgres:
        image: postgres
        environment:
            - "POSTGRES_PASSWORD=nebulapass"
            - "PGDATA=/var/lib/postgresql/data/pgdata"
        volumes:
            - database:/var/lib/postgresql/data
            - ./support/postgres-init:/docker-entrypoint-initdb.d

    memcached:
        image: memcached

    nginx:
        image: weseek/nginx-nchan
        ports:
            - "8080:80"
        volumes:
            - ./support/nginx.conf:/etc/nginx/conf.d/default.conf:ro
            - ./data:/data
        depends_on:
            - "core"

    #
    # Metrics and logging
    #

    prometheus:
        image: prom/prometheus:master
        hostname: "prometheus"
        volumes:
            - ./support/prometheus.yml:/etc/prometheus/prometheus.yml
        restart: unless-stopped
        command: [
            "--config.file=/etc/prometheus/prometheus.yml",
            "--log.level=warn",
            "--storage.tsdb.path=/prometheus",
            "--storage.tsdb.retention.time=7d",
        ]

    grafana:
        image: grafana/grafana:master
        hostname: "grafana"
        user: "0"
        volumes:
            - ./support/grafana.ini:/etc/grafana/grafana.ini:ro
            - ./support/grafana:/etc/grafana/provisioning:ro
        restart: unless-stopped

    loki:
        image: grafana/loki:master
        ports:
            - "3100:3100"
        restart: unless-stopped
        command: [
            "--config.file=/etc/loki/local-config.yaml",
            "--log.level=warn"
        ]

    #
    # Nebula core runs hub (API server) and nebula-setup
    #

    core:
        build: ./nebula
        hostname: "core"
        restart: always
        volumes:
            - ./nebula/nebula:/opt/nebula
            - ./nebula/nebula-setup:/opt/nebula-setup
            - ./settings:/opt/nebula-setup/template
            - ./data:/data
        depends_on:
            - postgres
            - memcached
        entrypoint: ./manage.py run hub

    #
    # Worker hosts basic services such as mesg, watch, meta...
    #

    worker:
        build: ./nebula
        hostname: "worker"
        restart: always
        volumes:
            - ./nebula/nebula:/opt/nebula
            - ./data:/data
        depends_on:
            - postgres
            - memcached
        entrypoint: ./nebula.py

    #
    # Playout node hosts a play instance configured to run a CONTI channel
    #

    playout:
        build: ./nebula
        hostname: "playout"
        restart: always
        volumes:
            - ./nebula/nebula:/opt/nebula
            - ./data:/data
        depends_on:
            - postgres
            - memcached
        entrypoint: ./nebula.py
